표하다
집
시작하기
안내서
API 참조
고급 주제
자원
신체 분석기
압축
연결을 해제하다
쿠키 파서
쿠키 세션
코르
서스펜션
오류 처리기
메소드 오버라이드
모건
멀터
응답 시간
서브 파비콘
서브 인덱스
서브 정적
세션
타임 아웃
유령
 참고 : 이 페이지는 본문 파서 README 에서 생성되었습니다 .
신체 분석기
NPM 버전 NPM 다운로드 빌드 상태 테스트 커버리지

Node.js 본문 파싱 미들웨어.

req.body속성 아래에서 사용할 수있는 처리기보다 먼저 미들웨어로 들어오는 요청 본문을 파싱 합니다.

참고 로 req.body의 형태는 사용자가 제어 입력에 기초하고,이 객체의 모든 속성 및 값은 신뢰할 수 있고 신뢰하기 전에 확인한다. 예를 들어 req.body.foo.toString()여러 가지 방법으로 실패 할 수 있습니다. 예를 들어 foo속성이 toString문자열에 없거나 문자열이 아니거나 함수가 아니며 문자열이나 다른 사용자 입력이 아닐 수 있습니다.

Node.js에서 HTTP 트랜잭션의 구조에 대해 배웁니다 .

이것은 복잡하고 일반적으로 큰 특성으로 인해 다중 부분 본문을 처리하지 않습니다 . 다중 부분 본문의 경우 다음 모듈에 관심이있을 수 있습니다.

busboy 및 connect-busboy
다단계 와 연결 다단식
무서운
멀터
이 모듈은 다음 구문 분석기를 제공합니다.

JSON 본문 파서
원시 파서
텍스트 본문 파서
URL로 인코딩 된 양식 본문 파서
관심이있을만한 다른 본문 파서 :

신체
공동
설치
$ npm install body-parser
API
var bodyParser = require('body-parser')
이 bodyParser객체는 미들웨어를 만들기 위해 다양한 공장을 노출합니다. 모든 미들웨어는 요청 헤더가 옵션 과 일치 req.body할 때 구문 분석 된 본문으로 속성을 채 웁니다. 구문 분석 할 본문 이 없거나 일치하지 않거나 오류가 발생 하면 빈 객체 ( ) 가 채워집니다 .Content-Typetype{}Content-Type

이 모듈이 반환하는 다양한 오류는 오류 섹션에 설명되어 있습니다 .

bodyParser.json ([options])
머리글이 옵션 과 일치하는 json요청 만 구문 분석 하고 만보 고 하는 미들웨어를 반환 Content-Type합니다 type. 이 파서는 유니 코드의 본문 인코딩을 허용하며 자동 인플레이션 gzip및  deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body.

옵션
이 json함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

자극성 음료
이 reviver옵션은 JSON.parse두 번째 인수로 직접 전달됩니다 . 이 인수 에 대한 자세한 정보 는 JSON.parse에 대한 MDN 문서를 참조하십시오 .

엄격한
로 설정하면 true배열과 객체 만 받아들입니다. 언제 false받아들이든지 JSON.parse받아 들일 것 입니다. 기본값은 true입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like json), MIME 유형 (like application/json) 또는 와일드 카드 ( */*or 또는 */json)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type 옵션은 as를 호출 fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 application/json입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.raw ([options])
모든 본문을 a로 구문 분석 Buffer하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 구문 분석기는 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body. 이것은 Buffer신체 의 대상 이 될 것 입니다.

옵션
이 raw함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like bin), MIME 유형 (like  application/octet-stream) 또는 와일드 카드 ( */*or 또는  application/*)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type옵션은 as를 호출 fn(req) 하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은  application/octet-stream입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.text ([options])
모든 본문을 문자열로 구문 분석하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 구문 분석기는 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 문자열 request 은 미들웨어 다음에 개체에 채워집니다 (예 :) req.body. 이것은 시체의 문자열이 될 것입니다.

옵션
이 text함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

defaultCharset
charset이 Content-Type요청 헤더에 지정되지 않은 경우 텍스트 내용의 기본 문자 집합을 지정합니다 . 기본값은 utf-8입니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like txt), MIME 유형 (like text/plain) 또는 와일드 카드 ( */*or 또는 text/*)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type 옵션은 as를 호출 fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 text/plain입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.urlencoded ([options])
urlencoded본문을 구문 분석 하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 파서는 본문에 대한 UTF-8 인코딩 만 허용하며 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body. 이 오브젝트는 값이 문자열이나 배열 (될 수있는 키 - 값 쌍, 포함 extended하다  false), 또는 임의의 유형 (경우 extended이다 true).

옵션
이 urlencoded함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

펼친
extended옵션을 사용하여 URL 인코딩 된 데이터를 분석하는 사이에 선택할 수 있습니다 querystring라이브러리 ( false) 또는 qs라이브러리 (  true). "확장 된"구문을 사용하면 풍부한 객체와 배열을 URL 인코딩 형식으로 인코딩 할 수 있으므로 URL 인코딩으로 JSON과 유사한 경험을 할 수 있습니다. 자세한 내용은 qs 라이브러리 를 참조하십시오 .

기본값은 true에 있지만 기본값을 사용하는 것은 더 이상 사용되지 않습니다. 사이의 차이에 대한 연구하십시오 qs및 querystring적절한 설정을 선택합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

parameterLimit
parameterLimit옵션은 URL 인코딩 된 데이터에서 허용되는 매개 변수의 최대 수를 제어합니다. 요청에이 값보다 많은 매개 변수가 있으면 413이 클라이언트에 리턴됩니다. 기본값은 1000입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like urlencoded), MIME 유형 (like  application/x-www-form-urlencoded) 또는 와일드 카드 (like */x-www-form-urlencoded)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type옵션은 as를 호출  fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 application/x-www-form-urlencoded입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

오류
이 모듈이 제공하는 미들웨어는 구문 분석하는 동안 오류 조건에 따라 오류를 만듭니다. 오류에는 일반적으로 제안 된 HTTP 응답 코드가 포함 된 status/ statusCode속성 expose, message속성이 클라이언트에 표시되어야 하는지 여부를 확인하는 속성,  type일치하지 않는 오류 유형을 확인  message하는 body속성 및 읽은 본문이 포함 된 속성이 포함됩니다 , 가능한 경우.

다음은 여러 가지 이유로 모든 오류가 발생할 수 있지만 방출되는 일반적인 오류입니다.

지원되지 않는 콘텐츠 인코딩
이 오류는 요청 Content-Encoding에 인코딩이 포함되어 있지만 "인플레이션"옵션이 설정된 헤더 가있을 때 발생 합니다 false. status속성으로 설정된 415제 1, type속성으로 설정되어  'encoding.unsupported', 상기 charset속성은 지원되지 않는 인코딩 설정 될 것이다.

요청이 중단되었습니다.
본문 읽기가 끝나기 전에 클라이언트가 요청을 중단하면이 오류가 발생합니다. received속성은 요청이 중단되었으며 이전에 접수 된 바이트 수로 설정됩니다 expected속성이 예상 바이트 수로 설정됩니다. status속성으로 설정 400 하고 type속성으로 설정됩니다 'request.aborted'.

엔터티가 너무 큼 요청
요청 본문 크기가 "제한"옵션보다 큰 경우이 오류가 발생합니다. limit속성은 바이트 제한으로 설정되고 length 속성은 요청 본문의 길이로 설정됩니다. status속성으로 설정 413하고 type속성으로 설정됩니다 'entity.too.large'.

요청 크기가 콘텐츠 길이와 일치하지 않습니다.
이 오류는 요청의 길이가 Content-Length헤더 의 길이와 일치하지 않을 때 발생합니다 . 일반적으로 Content-Length헤더가 바이트가 아닌 문자를 기반으로 계산 된 경우 요청이 잘못된 경우에 발생 합니다. status속성으로 설정 400하고 type속성으로 설정됩니다 'request.size.invalid'.

스트림 인코딩을 설정하면 안됩니다.
이 오류는 req.setEncoding이 미들웨어보다 먼저 메소드를 호출 할 때 발생합니다 . 이 모듈은 바이트에서만 직접 작동하며이 모듈을 사용할 req.setEncoding때 호출 할 수 없습니다 . status속성으로 설정  500하고 type속성으로 설정됩니다 'stream.encoding.set'.

너무 많은 매개 변수
이 오류는 요청의 내용 parameterLimit이 urlencoded파서에 대해 구성된 값 을 초과 할 때 발생 합니다 . status속성으로 설정  413하고 type속성으로 설정됩니다 'parameters.too.many'.

지원되지 않는 charset "BOGUS"
이 오류는 요청에 Content-Type헤더에 charset 매개 변수가 있지만 iconv-lite모듈이이를 지원하지 않거나 파서가 지원하지 않는 경우에 발생합니다. charset은 메시지와 charset속성에 포함됩니다. 이 status속성은로 설정되고 415,  type속성은로 설정되며 'charset.unsupported', charset속성은 지원되지 않는 charset으로 설정됩니다.

지원되지 않는 콘텐츠 인코딩 "가짜"
이 오류는 요청 Content-Encoding에 지원되지 않는 인코딩이 포함 된 헤더 가있는 경우 발생합니다 . 인코딩은 메시지뿐만 아니라 encoding속성 에도 포함됩니다 . status속성으로 설정된 415제 1, type속성으로 설정되어 'encoding.unsupported', 상기 encoding 속성은 지원되지 않는 인코딩 설정된다.

예제들
Express / Connect 최상위 레벨 제네릭
이 예제는 일반 JSON 및 URL 인코딩 파서를 최상위 레벨 미들웨어로 추가하여 모든 들어오는 요청의 본문을 구문 분석하는 방법을 보여줍니다. 이것은 가장 간단한 설정입니다.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

app.use(function (req, res) {
  res.setHeader('Content-Type', 'text/plain')
  res.write('you posted:\n')
  res.end(JSON.stringify(req.body, null, 2))
})
특급 경로 특유의
이 예제는 본문 파서를 필요로하는 경로에 특별히 추가하는 방법을 보여줍니다. 일반적으로 Express와 함께 body-parser를 사용하는 가장 좋은 방법입니다.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// create application/json parser
var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app.post('/login', urlencodedParser, function (req, res) {
  res.send('welcome, ' + req.body.username)
})

// POST /api/users gets JSON bodies
app.post('/api/users', jsonParser, function (req, res) {
  // create user in req.body
})
파서의 허용 된 유형 변경
모든 파서 는 미들웨어가 구문 분석 type할 옵션을 변경할 수 있는 옵션을 허용합니다  Content-Type.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// parse various different custom JSON types as JSON
app.use(bodyParser.json({ type: 'application/*+json' }))

// parse some custom thing into a Buffer
app.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))

// parse an HTML body into a string
app.use(bodyParser.text({ type: 'text/html' }))
특허
MIT


Documentation translations provided by StrongLoop/IBM: French, German, Spanish, Italian, Japanese, Russian, Chinese, Traditional Chinese, Korean, Portuguese. 
Community translation available for: Slovak, Ukrainian, Uzbek, Turkish and Thai.
Express is a project of the Node.js Foundation.Edit this page on GitHub.Copyright © 2017 StrongLoop, IBM, and other expressjs.com contributors.
크리에이티브 커먼즈 라이센스이 저작물은 Creative Commons Attribution-ShareAlike 3.0 미국 라이선스에 따라 사용이 허여됩니다 .
표하다
집
시작하기
안내서
API 참조
고급 주제
자원
신체 분석기
압축
연결을 해제하다
쿠키 파서
쿠키 세션
코르
서스펜션
오류 처리기
메소드 오버라이드
모건
멀터
응답 시간
서브 파비콘
서브 인덱스
서브 정적
세션
타임 아웃
유령
 참고 : 이 페이지는 본문 파서 README 에서 생성되었습니다 .
신체 분석기
NPM 버전 NPM 다운로드 빌드 상태 테스트 커버리지

Node.js 본문 파싱 미들웨어.

req.body속성 아래에서 사용할 수있는 처리기보다 먼저 미들웨어로 들어오는 요청 본문을 파싱 합니다.

참고 로 req.body의 형태는 사용자가 제어 입력에 기초하고,이 객체의 모든 속성 및 값은 신뢰할 수 있고 신뢰하기 전에 확인한다. 예를 들어 req.body.foo.toString()여러 가지 방법으로 실패 할 수 있습니다. 예를 들어 foo속성이 toString문자열에 없거나 문자열이 아니거나 함수가 아니며 문자열이나 다른 사용자 입력이 아닐 수 있습니다.

Node.js에서 HTTP 트랜잭션의 구조에 대해 배웁니다 .

이것은 복잡하고 일반적으로 큰 특성으로 인해 다중 부분 본문을 처리하지 않습니다 . 다중 부분 본문의 경우 다음 모듈에 관심이있을 수 있습니다.

busboy 및 connect-busboy
다단계 와 연결 다단식
무서운
멀터
이 모듈은 다음 구문 분석기를 제공합니다.

JSON 본문 파서
원시 파서
텍스트 본문 파서
URL로 인코딩 된 양식 본문 파서
관심이있을만한 다른 본문 파서 :

신체
공동
설치
$ npm install body-parser
API
var bodyParser = require('body-parser')
이 bodyParser객체는 미들웨어를 만들기 위해 다양한 공장을 노출합니다. 모든 미들웨어는 요청 헤더가 옵션 과 일치 req.body할 때 구문 분석 된 본문으로 속성을 채 웁니다. 구문 분석 할 본문 이 없거나 일치하지 않거나 오류가 발생 하면 빈 객체 ( ) 가 채워집니다 .Content-Typetype{}Content-Type

이 모듈이 반환하는 다양한 오류는 오류 섹션에 설명되어 있습니다 .

bodyParser.json ([options])
머리글이 옵션 과 일치하는 json요청 만 구문 분석 하고 만보 고 하는 미들웨어를 반환 Content-Type합니다 type. 이 파서는 유니 코드의 본문 인코딩을 허용하며 자동 인플레이션 gzip및  deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body.

옵션
이 json함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

자극성 음료
이 reviver옵션은 JSON.parse두 번째 인수로 직접 전달됩니다 . 이 인수 에 대한 자세한 정보 는 JSON.parse에 대한 MDN 문서를 참조하십시오 .

엄격한
로 설정하면 true배열과 객체 만 받아들입니다. 언제 false받아들이든지 JSON.parse받아 들일 것 입니다. 기본값은 true입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like json), MIME 유형 (like application/json) 또는 와일드 카드 ( */*or 또는 */json)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type 옵션은 as를 호출 fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 application/json입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.raw ([options])
모든 본문을 a로 구문 분석 Buffer하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 구문 분석기는 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body. 이것은 Buffer신체 의 대상 이 될 것 입니다.

옵션
이 raw함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like bin), MIME 유형 (like  application/octet-stream) 또는 와일드 카드 ( */*or 또는  application/*)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type옵션은 as를 호출 fn(req) 하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은  application/octet-stream입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.text ([options])
모든 본문을 문자열로 구문 분석하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 구문 분석기는 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 문자열 request 은 미들웨어 다음에 개체에 채워집니다 (예 :) req.body. 이것은 시체의 문자열이 될 것입니다.

옵션
이 text함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

defaultCharset
charset이 Content-Type요청 헤더에 지정되지 않은 경우 텍스트 내용의 기본 문자 집합을 지정합니다 . 기본값은 utf-8입니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like txt), MIME 유형 (like text/plain) 또는 와일드 카드 ( */*or 또는 text/*)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type 옵션은 as를 호출 fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 text/plain입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

bodyParser.urlencoded ([options])
urlencoded본문을 구문 분석 하고 Content-Type헤더가 type옵션 과 일치하는 요청 만보고하는 미들웨어를 반환 합니다 . 이 파서는 본문에 대한 UTF-8 인코딩 만 허용하며 자동 인플레이션 gzip및 deflate인코딩을 지원합니다 .

body구문 분석 된 데이터를 포함 하는 새 객체 request 는 미들웨어 다음에 객체에 채워집니다 (예 :) req.body. 이 오브젝트는 값이 문자열이나 배열 (될 수있는 키 - 값 쌍, 포함 extended하다  false), 또는 임의의 유형 (경우 extended이다 true).

옵션
이 urlencoded함수는 options다음 키를 포함 할 수 있는 선택적 객체를 사용합니다.

펼친
extended옵션을 사용하여 URL 인코딩 된 데이터를 분석하는 사이에 선택할 수 있습니다 querystring라이브러리 ( false) 또는 qs라이브러리 (  true). "확장 된"구문을 사용하면 풍부한 객체와 배열을 URL 인코딩 형식으로 인코딩 할 수 있으므로 URL 인코딩으로 JSON과 유사한 경험을 할 수 있습니다. 자세한 내용은 qs 라이브러리 를 참조하십시오 .

기본값은 true에 있지만 기본값을 사용하는 것은 더 이상 사용되지 않습니다. 사이의 차이에 대한 연구하십시오 qs및 querystring적절한 설정을 선택합니다.

부풀게 하다
로 설정하면 true수축 된 (압축 된) 물체가 팽창됩니다. 때  false, 수축 된 몸은 거절된다. 기본값은 true입니다.

한도
최대 요청 본문 크기를 제어합니다. 이것이 숫자 인 경우, 값은 바이트 수를 지정합니다. 문자열이면 파싱을 위해 값이 바이트 라이브러리로 전달됩니다 . 기본값은 '100kb'입니다.

parameterLimit
parameterLimit옵션은 URL 인코딩 된 데이터에서 허용되는 매개 변수의 최대 수를 제어합니다. 요청에이 값보다 많은 매개 변수가 있으면 413이 클라이언트에 리턴됩니다. 기본값은 1000입니다.

유형
이 type옵션은 미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수가 될 수 있습니다. 함수가 아니면 typeoption은 type-is 라이브러리에 직접 전달되며 확장명 (like urlencoded), MIME 유형 (like  application/x-www-form-urlencoded) 또는 와일드 카드 (like */x-www-form-urlencoded)가 있는 mime 유형 이 될 수 있습니다 . 함수 인 경우 type옵션은 as를 호출  fn(req)하고 truey 값을 반환하면 요청을 구문 분석합니다. 기본값은 application/x-www-form-urlencoded입니다.

확인
verify옵션이 제공되는 경우, 호출되는 verify(req, res, buf, encoding)경우, bufA는 Buffer원시 요청 본체 및 encoding상기 요청의 인코딩된다. 파싱은 오류를 던짐으로써 중단 될 수 있습니다.

오류
이 모듈이 제공하는 미들웨어는 구문 분석하는 동안 오류 조건에 따라 오류를 만듭니다. 오류에는 일반적으로 제안 된 HTTP 응답 코드가 포함 된 status/ statusCode속성 expose, message속성이 클라이언트에 표시되어야 하는지 여부를 확인하는 속성,  type일치하지 않는 오류 유형을 확인  message하는 body속성 및 읽은 본문이 포함 된 속성이 포함됩니다 , 가능한 경우.

다음은 여러 가지 이유로 모든 오류가 발생할 수 있지만 방출되는 일반적인 오류입니다.

지원되지 않는 콘텐츠 인코딩
이 오류는 요청 Content-Encoding에 인코딩이 포함되어 있지만 "인플레이션"옵션이 설정된 헤더 가있을 때 발생 합니다 false. status속성으로 설정된 415제 1, type속성으로 설정되어  'encoding.unsupported', 상기 charset속성은 지원되지 않는 인코딩 설정 될 것이다.

요청이 중단되었습니다.
본문 읽기가 끝나기 전에 클라이언트가 요청을 중단하면이 오류가 발생합니다. received속성은 요청이 중단되었으며 이전에 접수 된 바이트 수로 설정됩니다 expected속성이 예상 바이트 수로 설정됩니다. status속성으로 설정 400 하고 type속성으로 설정됩니다 'request.aborted'.

엔터티가 너무 큼 요청
요청 본문 크기가 "제한"옵션보다 큰 경우이 오류가 발생합니다. limit속성은 바이트 제한으로 설정되고 length 속성은 요청 본문의 길이로 설정됩니다. status속성으로 설정 413하고 type속성으로 설정됩니다 'entity.too.large'.

요청 크기가 콘텐츠 길이와 일치하지 않습니다.
이 오류는 요청의 길이가 Content-Length헤더 의 길이와 일치하지 않을 때 발생합니다 . 일반적으로 Content-Length헤더가 바이트가 아닌 문자를 기반으로 계산 된 경우 요청이 잘못된 경우에 발생 합니다. status속성으로 설정 400하고 type속성으로 설정됩니다 'request.size.invalid'.

스트림 인코딩을 설정하면 안됩니다.
이 오류는 req.setEncoding이 미들웨어보다 먼저 메소드를 호출 할 때 발생합니다 . 이 모듈은 바이트에서만 직접 작동하며이 모듈을 사용할 req.setEncoding때 호출 할 수 없습니다 . status속성으로 설정  500하고 type속성으로 설정됩니다 'stream.encoding.set'.

너무 많은 매개 변수
이 오류는 요청의 내용 parameterLimit이 urlencoded파서에 대해 구성된 값 을 초과 할 때 발생 합니다 . status속성으로 설정  413하고 type속성으로 설정됩니다 'parameters.too.many'.

지원되지 않는 charset "BOGUS"
이 오류는 요청에 Content-Type헤더에 charset 매개 변수가 있지만 iconv-lite모듈이이를 지원하지 않거나 파서가 지원하지 않는 경우에 발생합니다. charset은 메시지와 charset속성에 포함됩니다. 이 status속성은로 설정되고 415,  type속성은로 설정되며 'charset.unsupported', charset속성은 지원되지 않는 charset으로 설정됩니다.

지원되지 않는 콘텐츠 인코딩 "가짜"
이 오류는 요청 Content-Encoding에 지원되지 않는 인코딩이 포함 된 헤더 가있는 경우 발생합니다 . 인코딩은 메시지뿐만 아니라 encoding속성 에도 포함됩니다 . status속성으로 설정된 415제 1, type속성으로 설정되어 'encoding.unsupported', 상기 encoding 속성은 지원되지 않는 인코딩 설정된다.

예제들
Express / Connect 최상위 레벨 제네릭
이 예제는 일반 JSON 및 URL 인코딩 파서를 최상위 레벨 미들웨어로 추가하여 모든 들어오는 요청의 본문을 구문 분석하는 방법을 보여줍니다. 이것은 가장 간단한 설정입니다.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

app.use(function (req, res) {
  res.setHeader('Content-Type', 'text/plain')
  res.write('you posted:\n')
  res.end(JSON.stringify(req.body, null, 2))
})
특급 경로 특유의
이 예제는 본문 파서를 필요로하는 경로에 특별히 추가하는 방법을 보여줍니다. 일반적으로 Express와 함께 body-parser를 사용하는 가장 좋은 방법입니다.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// create application/json parser
var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app.post('/login', urlencodedParser, function (req, res) {
  res.send('welcome, ' + req.body.username)
})

// POST /api/users gets JSON bodies
app.post('/api/users', jsonParser, function (req, res) {
  // create user in req.body
})
파서의 허용 된 유형 변경
모든 파서 는 미들웨어가 구문 분석 type할 옵션을 변경할 수 있는 옵션을 허용합니다  Content-Type.

var express = require('express')
var bodyParser = require('body-parser')

var app = express()

// parse various different custom JSON types as JSON
app.use(bodyParser.json({ type: 'application/*+json' }))

// parse some custom thing into a Buffer
app.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))

// parse an HTML body into a string
app.use(bodyParser.text({ type: 'text/html' }))
특허
MIT


Documentation translations provided by StrongLoop/IBM: French, German, Spanish, Italian, Japanese, Russian, Chinese, Traditional Chinese, Korean, Portuguese. 
Community translation available for: Slovak, Ukrainian, Uzbek, Turkish and Thai.
Express is a project of the Node.js Foundation.Edit this page on GitHub.Copyright © 2017 StrongLoop, IBM, and other expressjs.com contributors.
크리에이티브 커먼즈 라이센스이 저작물은 Creative Commons Attribution-ShareAlike 3.0 미국 라이선스에 따라 사용이 허여됩니다 .
